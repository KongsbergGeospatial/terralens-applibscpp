#pragma once

#if _WIN32
#include "windows.h"
//KEY from VK_
#define KEY_SYS_TO_TL(x) const static int TL_KEY_##x = VK_##x;
//KEY from different VK_ (Linux favored)
#define KEY_SYS_TO_TL2(x,y) const static int TL_KEY_##x = VK_##y;
//KEY from different VK_ (Windows favored)
#define KEY_SYS_TO_TL3(x,y) const static int TL_KEY_##x = VK_##x;
//KEY from ASCII
#define KEY_SYS_TO_TLA(x,y) const static int TL_KEY_##x = ##y;
//Linux Only
#define KEY_SYS_TO_TLL(x) const static int TL_KEY_##x = 0;
#else
#include "input-event-codes.h"
//KEY from VK_
#define KEY_SYS_TO_TL(x) const static int TL_KEY_##x = KEY_##x;
//KEY from different VK_ (Linux favored)
#define KEY_SYS_TO_TL2(x,y) const static int TL_KEY_##x = KEY_##x;
//KEY from different VK_ (Windows favored)
#define KEY_SYS_TO_TL3(x,y) const static int TL_KEY_##x = KEY_##y;
//KEY from ASCII
#define KEY_SYS_TO_TLA(x,y) const static int TL_KEY_##x = KEY_##x;
//Linux Only
#define KEY_SYS_TO_TLL(x) const static int TL_KEY_##x = KEY_##x;
#endif

namespace TerraLens
{
	//Attempt to translate between linux and windows style key codes
	//This produces a series of TL_KEY_* values that should match
	//the key values produced by the OS
	KEY_SYS_TO_TL2(ESC, ESCAPE)
	KEY_SYS_TO_TLA(1, '1')
	KEY_SYS_TO_TLA(2, '2')
	KEY_SYS_TO_TLA(3, '3')
	KEY_SYS_TO_TLA(4, '4')
	KEY_SYS_TO_TLA(5, '5')
	KEY_SYS_TO_TLA(6, '6')
	KEY_SYS_TO_TLA(7, '7')
	KEY_SYS_TO_TLA(8, '8')
	KEY_SYS_TO_TLA(9, '9')
	KEY_SYS_TO_TLA(0, '0')
	KEY_SYS_TO_TL2(MINUS, OEM_MINUS)
	KEY_SYS_TO_TL2(EQUAL, OEM_PLUS)
	KEY_SYS_TO_TL2(BACKSPACE, BACK)
	KEY_SYS_TO_TL(TAB)
	KEY_SYS_TO_TLA(Q, 'Q')
	KEY_SYS_TO_TLA(W, 'W')
	KEY_SYS_TO_TLA(E, 'E')
	KEY_SYS_TO_TLA(R, 'R')
	KEY_SYS_TO_TLA(T, 'T')
	KEY_SYS_TO_TLA(Y, 'Y')
	KEY_SYS_TO_TLA(U, 'U')
	KEY_SYS_TO_TLA(I, 'I')
	KEY_SYS_TO_TLA(O, 'O')
	KEY_SYS_TO_TLA(P, 'P')

	KEY_SYS_TO_TL2(LEFTBRACE, OEM_4)
	KEY_SYS_TO_TL2(RIGHTBRACE, OEM_6)
	KEY_SYS_TO_TL2(ENTER, RETURN)
	KEY_SYS_TO_TL2(LEFTCTRL, LCONTROL)

	KEY_SYS_TO_TLA(A, 'A')
	KEY_SYS_TO_TLA(S, 'S')
	KEY_SYS_TO_TLA(D, 'D')
	KEY_SYS_TO_TLA(F, 'F')
	KEY_SYS_TO_TLA(G, 'G')
	KEY_SYS_TO_TLA(H, 'H')
	KEY_SYS_TO_TLA(J, 'J')
	KEY_SYS_TO_TLA(K, 'K')
	KEY_SYS_TO_TLA(L, 'L')

	KEY_SYS_TO_TL2(SEMICOLON, OEM_1)
	KEY_SYS_TO_TL2(APOSTROPHE, OEM_7)
	KEY_SYS_TO_TL2(GRAVE, OEM_3)
	KEY_SYS_TO_TL2(LEFTSHIFT, LSHIFT)
	KEY_SYS_TO_TL2(BACKSLASH, OEM_5)

	KEY_SYS_TO_TLA(Z, 'Z')
	KEY_SYS_TO_TLA(X, 'X')
	KEY_SYS_TO_TLA(C, 'C')
	KEY_SYS_TO_TLA(V, 'V')
	KEY_SYS_TO_TLA(B, 'B')
	KEY_SYS_TO_TLA(N, 'N')
	KEY_SYS_TO_TLA(M, 'M')

	KEY_SYS_TO_TL2(COMMA, OEM_COMMA)
	KEY_SYS_TO_TL2(DOT, OEM_PERIOD)
	KEY_SYS_TO_TL2(SLASH, OEM_2)
	KEY_SYS_TO_TL2(RIGHTSHIFT, RSHIFT)
	KEY_SYS_TO_TL2(KPASTERISK, MULTIPLY)
	KEY_SYS_TO_TL2(LEFTALT, LMENU)

	KEY_SYS_TO_TL(SPACE)

	KEY_SYS_TO_TL2(CAPSLOCK, CAPITAL)

	KEY_SYS_TO_TL(F1)
	KEY_SYS_TO_TL(F2)
	KEY_SYS_TO_TL(F3)
	KEY_SYS_TO_TL(F4)
	KEY_SYS_TO_TL(F5)
	KEY_SYS_TO_TL(F6)
	KEY_SYS_TO_TL(F7)
	KEY_SYS_TO_TL(F8)
	KEY_SYS_TO_TL(F9)
	KEY_SYS_TO_TL(F10)
	KEY_SYS_TO_TL(NUMLOCK)

	KEY_SYS_TO_TL2(SCROLLLOCK, SCROLL)
	KEY_SYS_TO_TL2(KP7, NUMPAD7)
	KEY_SYS_TO_TL2(KP8, NUMPAD8)
	KEY_SYS_TO_TL2(KP9, NUMPAD9)
	KEY_SYS_TO_TL2(KPMINUS, SUBTRACT)
	KEY_SYS_TO_TL2(KP4, NUMPAD4)
	KEY_SYS_TO_TL2(KP5, NUMPAD5)
	KEY_SYS_TO_TL2(KP6, NUMPAD6)
	KEY_SYS_TO_TL2(KPPLUS, ADD)
	KEY_SYS_TO_TL2(KP1, NUMPAD1)
	KEY_SYS_TO_TL2(KP2, NUMPAD2)
	KEY_SYS_TO_TL2(KP3, NUMPAD3)
	KEY_SYS_TO_TL2(KP0, NUMPAD0)
	KEY_SYS_TO_TL2(KPDOT, DECIMAL)

	KEY_SYS_TO_TL2(102ND, OEM_PA1)

	KEY_SYS_TO_TL(F11)
	KEY_SYS_TO_TL(F12)

	KEY_SYS_TO_TL2(RO, OEM_BACKTAB)
	KEY_SYS_TO_TL2(KATAKANA, OEM_FINISH)
	KEY_SYS_TO_TL2(HIRAGANA, OEM_COPY)
	KEY_SYS_TO_TL2(HENKAN, CONVERT)
	KEY_SYS_TO_TL2(MUHENKAN, NONCONVERT)
	KEY_SYS_TO_TL2(KPJPCOMMA, SEPARATOR)
	KEY_SYS_TO_TL2(KPENTER, RETURN)
	KEY_SYS_TO_TL2(RIGHTCTRL, RCONTROL)
	KEY_SYS_TO_TL2(KPSLASH, DIVIDE)
	KEY_SYS_TO_TL2(SYSRQ, SNAPSHOT)

	KEY_SYS_TO_TL2(RIGHTALT, RMENU)

	KEY_SYS_TO_TL2(LINEFEED, RETURN)

	KEY_SYS_TO_TL(HOME)
	KEY_SYS_TO_TL(UP)

	KEY_SYS_TO_TL2(PAGEUP, PRIOR)

	KEY_SYS_TO_TL(LEFT)
	KEY_SYS_TO_TL(RIGHT)
	KEY_SYS_TO_TL(END)
	KEY_SYS_TO_TL(DOWN)

	KEY_SYS_TO_TL2(PAGEDOWN, NEXT)

	KEY_SYS_TO_TL(INSERT)
	KEY_SYS_TO_TL(DELETE)

	KEY_SYS_TO_TLL(MACRO)
	KEY_SYS_TO_TL2(MUTE, VOLUME_MUTE)
	KEY_SYS_TO_TL2(VOLUMEDOWN, VOLUME_DOWN)
	KEY_SYS_TO_TL2(VOLUMEUP, VOLUME_UP)
	KEY_SYS_TO_TLL(POWER)	/* SC System Power Down */
	KEY_SYS_TO_TLL(KPEQUAL)
	KEY_SYS_TO_TLL(KPPLUSMINUS)

	KEY_SYS_TO_TL(PAUSE)

	KEY_SYS_TO_TL2(SCALE, ZOOM)	/* AL Compiz Scale (Expose) */

	KEY_SYS_TO_TL2(KPCOMMA, SEPARATOR)

	KEY_SYS_TO_TL(HANGEUL)
	KEY_SYS_TO_TL(HANJA)

	KEY_SYS_TO_TLL(YEN)
	KEY_SYS_TO_TL2(LEFTMETA, LWIN)
	KEY_SYS_TO_TL2(RIGHTMETA, RWIN)
	KEY_SYS_TO_TL3(LWIN, LEFTMETA)
	KEY_SYS_TO_TL3(RWIN, RIGHTMETA)
	KEY_SYS_TO_TLL(COMPOSE)
};
